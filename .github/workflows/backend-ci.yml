name: Kryptokrona API Backend Pipeline

env:
  GITHUB_REGISTRY: "ghcr.io"
  GITHUB_OWNER: "kryptokrona"
  GITHUB_DOCKER_IMAGE: "kryptokrona-api"

on:
  workflow_call:

jobs:
  assemble:
    name: Assemble
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Assemble
        run: ./gradlew assemble

      - name: Upload Build Directory Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-dir
          path: ./build

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [ assemble ]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: kryptokrona_api_dev
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run Liquibase Migrations
        run: ./gradlew update -PdbEnv=dev

      - name: Run Unit Test
        run: ./gradlew test

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [ unit-test ]
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Download Build Directory
        uses: actions/download-artifact@v3
        with:
          name: build-dir
          path: ./build

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} . --no-cache

      - name: Tag Images
        run: |
          docker tag $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest

      - name: Publish Docker Image to GitHub Repository
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest
